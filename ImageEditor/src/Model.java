import java.awt.image.BufferedImage;
import java.util.Stack;

/**
 * This class represents the implementation of the IModel interface. This represents the model in
 * our model, view, controller design.
 */
public class Model implements IModel {
  /**
   * The current image in the model that was either loaded or generated by the model and can be
   * edited.
   */
  private Image image = null;
  /**
   * Stack of previous model images.
   */
  private Stack<Image> undoStack = new Stack<>();
  /**
   * Stack of model images popped off the undoStack.
   */
  private Stack<Image> redoStack = new Stack<>();

  @Override
  public BufferedImage getImage() throws IllegalStateException {
    if (image == null) {
      throw new IllegalStateException("You must load or generate an image.");
    }
    try {
      int[][][] pixels = image.getRgb();
      return ImageUtil.getBufferImage(pixels, pixels[0].length, pixels.length);
    } catch (IllegalStateException e) {
      throw new IllegalStateException(e.getMessage());
    }
  }

  @Override
  public void loadImage(int[][][] rgb) {
    emptyUndo();
    emptyRedo();
    this.image = new Image(rgb);
  }

  @Override
  public void undo() throws IllegalStateException {
    if (undoStack.empty()) {
      throw new IllegalStateException("No edits to undo.");
    }

    redoStack.push(this.image);
    this.image = undoStack.pop();
  }

  @Override
  public void redo() throws IllegalStateException {
    if (redoStack.empty()) {
      throw new IllegalStateException("No edits to redo.");
    }

    undoStack.push(this.image);
    this.image = redoStack.pop();
  }

  @Override
  public void reset() {
    this.image = null;
    emptyUndo();
    emptyUndo();
  }

  @Override
  public void blur() throws IllegalStateException {
    if (this.image == null) {
      throw new IllegalStateException("You must have loaded an image or generated one before "
              + "blurring");
    }
    emptyRedo();
    undoStack.push(this.image);
    ImageEditor b = new Blur();
    this.image = b.edit(this.image);
  }

  @Override
  public void dither() throws IllegalStateException {
    if (this.image == null) {
      throw new IllegalStateException("You must have loaded an image or generated one before "
              + "dithering");
    }
    emptyRedo();
    undoStack.push(this.image);
    ImageEditor d = new Dither();
    this.image = d.edit(this.image);
  }

  @Override
  public void mosaic(int seed) throws IllegalStateException, IllegalArgumentException {
    if (this.image == null) {
      throw new IllegalStateException("You must have loaded an image or generated one before "
              + "doing a mosaic");
    }
    emptyRedo();
    undoStack.push(this.image);
    Mosaic m = new Mosaic();
    this.image = m.edit(this.image, seed);
  }

  @Override
  public void sharpen() throws IllegalStateException {
    if (this.image == null) {
      throw new IllegalStateException("You must have loaded an image or generated one before "
              + "sharpening");
    }
    emptyRedo();
    undoStack.push(this.image);
    ImageEditor s = new Sharpen();
    this.image = s.edit(this.image);
  }

  @Override
  public void greyscale() throws IllegalStateException {
    if (this.image == null) {
      throw new IllegalStateException("You must have loaded an image or generated one before "
              + "changing the color");
    }
    emptyRedo();
    undoStack.push(this.image);
    ImageEditor gs = new GreyScale();
    this.image = gs.edit(this.image);
  }

  @Override
  public void sepia() throws IllegalStateException {
    if (this.image == null) {
      throw new IllegalStateException("You must have loaded an image or generated one before "
              + "changing the color");
    }
    emptyRedo();
    undoStack.push(this.image);
    ImageEditor s = new Sepia();
    this.image = s.edit(this.image);
  }

  @Override
  public void generateVertRainbow(int width, int height) throws IllegalArgumentException {
    emptyUndo();
    emptyRedo();
    VerticalRainbow vr = new VerticalRainbow();
    this.image = vr.generate(width, height);
  }

  @Override
  public void generateHorizRainbow(int width, int height) throws IllegalArgumentException {
    emptyUndo();
    emptyRedo();
    HorizontalRainbow hr = new HorizontalRainbow();
    this.image = hr.generate(width, height);
  }

  @Override
  public void generateCheckers(int size) throws IllegalArgumentException {
    emptyUndo();
    emptyRedo();
    Generator c = new Checkers();
    this.image = c.generate(size);
  }

  @Override
  public void generateFrenchFlag(int size) throws IllegalArgumentException {
    emptyUndo();
    emptyRedo();
    Generator ff = new FrenchFlag();
    this.image = ff.generate(size);
  }

  @Override
  public void generateGreekFlag(int size) throws IllegalArgumentException {
    emptyUndo();
    emptyRedo();
    Generator gf = new GreekFlag();
    this.image = gf.generate(size);
  }

  @Override
  public void generateSwissFlag(int size) throws IllegalArgumentException {
    emptyUndo();
    emptyRedo();
    Generator sf = new SwissFlag();
    this.image = sf.generate(size);
  }

  /**
   * Empties the undo stack.  If undo stack is already empty, does nothing.
   */
  private void emptyUndo() {
    while (!undoStack.empty()) {
      undoStack.pop();
    }
  }

  /**
   * Empties the redo stack.  If redo stack is already empty, does nothing.
   */
  private void emptyRedo() {
    while (!redoStack.empty()) {
      redoStack.pop();
    }
  }

}
